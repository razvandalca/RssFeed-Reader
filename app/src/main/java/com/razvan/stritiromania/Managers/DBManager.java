package com.razvan.stritiromania.Managers;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.os.Environment;import android.util.Log;import com.einmalfel.earl.Item;import java.io.File;import java.util.ArrayList;import java.util.List;/** * Created by Razvan'S PC on 22.03.2016. */public class DBManager extends SQLiteOpenHelper{    private String TAG ="DBManager";    private DBManager instance;    private static final int DATABASE_VERSION = 1;    private final static String DB_NAME="stiriDB.db";    private static final String TABLE_FAVORITES="favorites";    //FAVORITES TABLE COLUMNS    private final static String ID_COLUMN="id";    private final static String TITLE_COLUMN="title";    private final static String DESCRIPTION_COLUMN="description";    private final static String LINK_COLUMN="link";    private final static String IMAGELINK_COLUMN="image_link";    private final static String AUTHOR_COLUMN="author";    private final static String PUBLICATIONDATE_COLUMN="publication";    private final static String CREATE_FAVORITES_TABLE="CREATE TABLE "            + TABLE_FAVORITES + "(" + ID_COLUMN + " INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL," + TITLE_COLUMN            + " TEXT," + DESCRIPTION_COLUMN + " TEXT," + LINK_COLUMN            + " TEXT," +IMAGELINK_COLUMN + " TEXT,"+AUTHOR_COLUMN + " TEXT, "+ PUBLICATIONDATE_COLUMN+ " TEXT "+ ")";    private static final String SQL_DELETE_ENTRIES =            "DROP TABLE IF EXISTS " + TABLE_FAVORITES;    public DBManager(Context context) {        super(context, DB_NAME, null, DATABASE_VERSION);        Log.e(TAG, "DBManager: CONSTRUCTor" );    }    @Override    public void onCreate(SQLiteDatabase db) {        db.execSQL(CREATE_FAVORITES_TABLE);        Log.e(TAG, "onCreate: " );    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        db.execSQL(SQL_DELETE_ENTRIES);        onCreate(db);    }    public void addToFavorites (Item item){        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        values.put(TITLE_COLUMN, item.getTitle());        values.put(DESCRIPTION_COLUMN, item.getDescription());        values.put(LINK_COLUMN, item.getLink());        values.put(IMAGELINK_COLUMN, item.getImageLink());        values.put(AUTHOR_COLUMN, item.getAuthor());        values.put(PUBLICATIONDATE_COLUMN, item.getPublicationDate().toString());        db.insert(TABLE_FAVORITES,null,values);        Log.e(TAG, "addToFavorites: ");        Log.e(TAG, "addToFavorites: PATH "+db.getPath());    }    public boolean itemExistsinFavorites(Item item){            SQLiteDatabase db = this.getReadableDatabase();            String selectQuery = "SELECT  * FROM " + TABLE_FAVORITES + " WHERE "                    + LINK_COLUMN + " = " +"'"+ item.getLink()+"'";            Log.e(TAG, selectQuery);            Cursor c = db.rawQuery(selectQuery, null);            if (c != null) {                return true;            }            return false;    }    public List<com.razvan.stritiromania.Pojos.Item> getAllFavorites() {        List<com.razvan.stritiromania.Pojos.Item> items = new ArrayList<com.razvan.stritiromania.Pojos.Item>();        String selectQuery = "SELECT  * FROM " + TABLE_FAVORITES;        Log.e(TAG,"getAllFavorites " +selectQuery);        SQLiteDatabase db = this.getReadableDatabase();        Cursor c = db.rawQuery(selectQuery, null);        // looping through all rows and adding to list        if (c.moveToFirst()) {            do {                com.razvan.stritiromania.Pojos.Item td = new com.razvan.stritiromania.Pojos.Item() {                };                td.setLink(c.getString(c.getColumnIndex(LINK_COLUMN)));                td.setAuthor(c.getString(c.getColumnIndex(AUTHOR_COLUMN)));                td.setDescription(c.getString(c.getColumnIndex(DESCRIPTION_COLUMN)));                td.setImageLink(c.getString(c.getColumnIndex(IMAGELINK_COLUMN)));                td.setTitle(c.getString(c.getColumnIndex(TITLE_COLUMN)));                items.add(td);            } while (c.moveToNext());        }        return items;    }    public void deleteItem(Item item) {        SQLiteDatabase db = this.getWritableDatabase();        db.delete(TABLE_FAVORITES, LINK_COLUMN + " = ?",                new String[] { item.getLink()});    }}